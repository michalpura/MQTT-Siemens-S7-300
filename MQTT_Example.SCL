(* Example Application Function Block calling MQTT *)
FUNCTION_BLOCK FB70

TITLE = 'MQTT Example Application'
VERSION : '1.0'
AUTHOR : Brand

VAR_INPUT
    con : BOOL;     // Rise to Connect
    discon : BOOL;  // Rise to Disconnect
    pub : BOOL;     // Rise to Publish
    sub : BOOL;     // Rise to Subscribe
    unsub : BOOL;   // Rise to Unsubscribe
END_VAR
VAR_TEMP
    i : INT;
END_VAR
VAR
    fcon, fpub, fsub,fdiscon,funsub : BOOL; // flags used for rising trigger detection

    receivedData : ARRAY[0..1024] OF BYTE;
    
    willData : ARRAY[0..128] OF BYTE;
    willDataLength : INT := 0;
    pubAckReceived : BOOL :=0;
    
    myPublishMessageID : INT := 0;

    publishPayloadData : ARRAY[0..100] OF BYTE;
    publishPayloadLength : INT := 0;
    
END_VAR
BEGIN
                   
(* USER INPUT CONTROLS *)

    // Manual connect. Make con high
    IF con AND NOT fcon THEN
        
        mqttCONNECT( clientID := 'MYRANDOMCLIENTID',
                     withUsername:=false,
                     withPassword:=false,
                     cleanSession:=true,
                     withWill:=true,
                     willQos:=0,
                     willRetain:=0,
                     willTopic:='Connection Lost',
                     willPayload:=willData[0],
                     willPayloadLength:=0,
                     username:='a',
                     password:='b'
                   );

    END_IF;
    fcon := con;

    // Make discon high to disconnect
    IF discon AND NOT fdiscon THEN
        mqttDISCONNECT();
    END_IF;
    fdiscon := discon;
    
    // Make pub high to publish
    IF pub AND NOT fpub THEN
        
        myPublishMessageID := mqttPUBLISH( topic := 'SIEMENSTOPIC',
		                                   messageid := 0, //message id = 0 autogenerate it, > 0 manually set
                                           payload := publishPayloadData[0],
                                           payloadLength := publishPayloadLength,
                                           qos := mqttGlobals.MQTTQOS1,
                                           retain := false,
                                           duplicate := false
                                         );
    END_IF;
    fpub := pub;

    // Make sub high to subscribe
    IF sub AND NOT fsub THEN
        mqttSUBSCRIBE( topic := 'SIEMENSTOPIC',
                       topicQos := mqttGlobals.MQTTQOS0
                      );
    END_IF;
    fsub := sub;
    
    // Make sub high to unsubscribe
    IF funsub AND NOT unsub THEN
        mqttUNSUBSCRIBE(topic := 'SIEMENSTOPIC');
    END_IF;
    funsub := unsub;


(* OTHER *)

    // Automatic reconnect example if needed
    IF mqttData.ethTCPConnected AND (mqttData._State < 0) THEN
        //connect(id := 'CPU313C');
        mqttCONNECT( clientID := 'CPU313C',
                     withUsername:=false,
                     withPassword:=false,
                     cleanSession:=true,
                     withWill:=true,
                     willQos:=0,
                     willRetain:=0,
                     willTopic:='Connection Lost',
                     willPayload:=willData[0],
                     willPayloadLength:=0,
                     username:='a',
                     password:='b'
                   );
    END_IF;


(* RECEIVING *)
    
    IF MQTT_DB.callback THEN
    
        // Received a package from a subscription
        IF MQTT_DB.callbackPacketType = mqttGlobals.MQTTPUBLISH THEN
            MQTT_DB.callback := false;
            IF MQTT_DB.pubTopic = 'SIEMENSTOPIC' THEN
                IF MQTT_DB.payloadSize >= 1024 THEN
                     FOR i:=0 TO 1023 DO
                        receivedData[i] := MQTT_DB.payload[i];
                    END_FOR;               
                ELSE
                    FOR i:=0 TO MQTT_DB.payloadSize-1 DO
                        receivedData[i] := MQTT_DB.payload[i];
                    END_FOR;
               END_IF;
                
            END_IF;
        END_IF;
        
        // Received a packet from a handshake response
        // Example for Qos1 (Single stage handshake with PUBACK response) or Qo2 (Dual stage handshake with PUBCOMP response)
        IF (MQTT_DB.callbackPacketType = mqttGlobals.MQTTPUBACK) OR  (MQTT_DB.callbackPacketType = mqttGlobals.MQTTPUBCOMP) THEN
            MQTT_DB.callback := false;
            pubAckReceived := true;           
        END_IF;
   
    END_IF; //MQTT_DB.callback
   

END_FUNCTION_BLOCK


(* OB1 Cyclic execution by PLC *)
ORGANIZATION_BLOCK OB1
VAR_TEMP
    // Reserved
    info : ARRAY[0..19] OF BYTE;
    // Temporary Variables
    ptrPayloadTemp : ANY;
    structPtrPayloadTemp AT ptrPayloadTemp : UDT_STRUCTANYPTR;
END_VAR

(* IMPORTANT: Uncomment this for PN ethernet
MQTT.DB71( connectionID := 1  // IN: INT, only used for external ethernet (CP)
           ,ipBlock1 :=  192  // IN: INT, IP address parameter only with internal ethernet (PN)
           ,ipBlock2 :=  168  // IN: INT, IP address parameter only with PN internal ethernet (PN)
           ,ipBlock3 :=  1    // IN: INT, IP address parameter only with PN internal ethernet (PN)
           ,ipBlock4 :=  1    // IN: INT, IP address parameter only with PN internal ethernet (PN)
           ,ipPort :=  1883   // IN: INT, IP port parameter only with PN internal ethernet (PN)
           ); 
*) 

(* IMPORTANT: Uncomment this for CP ethernet
MQTT.MQTT_DB( connectionID :=  1    // IN: INT, only used for external ethernet (CP)
              ,cpLADDR :=  W#16#100 // IN: WORD, only used for external ethhernet (CP)
             ); 
*) 

          
FB70.DB70();    // Example Application

END_ORGANIZATION_BLOCK

